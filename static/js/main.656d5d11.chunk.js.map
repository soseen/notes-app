{"version":3,"sources":["NewNoteForm.js","NotesBoard.js","App.js","serviceWorker.js","index.js"],"names":["NewNoteForm","addNote","useState","characters","setCharacters","noteToSend","setNoteToSend","className","onSubmit","e","preventDefault","length","test","type","onChange","target","value","maxlength","NotesBoard","notes","setNotes","map","item","key","note","notesArray","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RA+BiBA,G,MA5BG,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EAEKC,mBAAS,GAFd,mBAExBC,EAFwB,KAEZC,EAFY,OAGKF,mBAAS,IAHd,mBAGxBG,EAHwB,KAGZC,EAHY,KAkB/B,OACI,yBAAKC,UAAU,sBACX,0BAAMA,UAAU,YAAYC,SAfnB,SAACC,GACdA,EAAEC,iBACCL,EAAWM,OAAS,GAAK,KAAKC,KAAKP,KAClCJ,EAAQI,GACRC,EAAc,OAYV,0CAAgBH,EAAhB,OACA,2BAAOU,KAAK,WAAWC,SATb,SAACL,GACnBH,EAAcG,EAAEM,OAAOC,OACvBZ,EAAcK,EAAEM,OAAOC,MAAML,SAO2BM,UAAW,SCM5DC,G,MA3BI,WAAO,IAAD,EAEKhB,mBAAS,CAAC,qBAFf,mBAEdiB,EAFc,KAEPC,EAFO,KAQjB,OACI,yBAAKb,UAAU,mBACX,wCACA,yBAAKA,UAAU,eACVY,EAAME,KAAI,SAAAC,GAAI,OACX,yBAAKC,IAAKD,EAAMf,UAAU,QACtB,0BAAMA,UAAU,QAChB,qCACA,2BAAIe,QAIhB,wCACA,kBAAC,EAAD,CAAarB,QAjBT,SAACuB,GACb,IAAIC,EAAU,sBAAON,GAAP,CAAcK,IAC5BJ,EAASK,S,MCEFC,MARf,WACE,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,QCKcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.656d5d11.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './NewNoteForm.css';\r\n\r\nconst NewNoteForm = ({addNote}) => {\r\n\r\n    const [characters, setCharacters] = useState(0);\r\n    const [noteToSend, setNoteToSend] = useState('');\r\n\r\n    const sendNote = (e) => {\r\n        e.preventDefault();\r\n        if(noteToSend.length > 0 && /\\S/.test(noteToSend)){\r\n            addNote(noteToSend);\r\n            setNoteToSend('');\r\n        }\r\n    }\r\n\r\n    const getNoteString = (e) => {\r\n        setNoteToSend(e.target.value);\r\n        setCharacters(e.target.value.length);\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-note-container\">\r\n            <form className=\"note-form\" onSubmit={sendNote}>\r\n                <p>Characters: {characters}/30</p>\r\n                <input type=\"textarea\" onChange={getNoteString} maxlength={30} />\r\n            </form>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  export default NewNoteForm;","import React, {useState, useEffect} from 'react';\r\nimport NewNoteForm from './NewNoteForm';\r\nimport './NotesBoard.css';\r\n\r\nconst NotesBoard = () => {\r\n\r\n    const [notes, setNotes] = useState(['Posprzatac pokoj']);\r\n\r\n    const addNote = (note) => {\r\n        let notesArray = [...notes, note];\r\n        setNotes(notesArray);\r\n    }\r\n        return (\r\n            <div className=\"board-container\">\r\n                <h1>My Notes</h1>\r\n                <div className=\"notes-board\">\r\n                    {notes.map(item => (\r\n                        <div key={item} className=\"note\">\r\n                            <span className=\"pin\"></span>\r\n                            <h3>#Note</h3>\r\n                            <p>{item}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <h2>New Note</h2>\r\n                <NewNoteForm addNote={addNote}/>\r\n            </div>\r\n          );\r\n   \r\n}\r\n\r\nexport default NotesBoard;","import React from 'react';\nimport NotesBoard from './NotesBoard';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NotesBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}